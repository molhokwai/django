"""
Django settings for django_app project.

Generated by 'django-admin startproject' using Django 4.2.11.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
from shutil import which
import os, logging, sys
from datetime import timedelta


# Printing
# Verbosity: 0 | 1 | 2 | 3
# ------------------------
PRINT_VERBOSITY = 0
def _print(val, VERBOSITY=0):
    if PRINT_VERBOSITY > 0:
        print(val)
    elif PRINT_VERBOSITY >= VERBOSITY:
        print(val)


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
_print('--------------| BASE_DIR :: %s' % BASE_DIR, VERBOSITY=2)

sys.path.append(BASE_DIR) 


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/


# Security
# WARNING: keep the secret key used in production secret!
# --------
# SECRET_KEY = str(os.getenv('SECRET_KEY'))
SECRET_KEY = 'django-insecure-kc45@neob5bj2m#jj5_#^#eqz!htt#bg0hi4v)n1obnsmmy(zn'



# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False
IS_LIVE = True
IS_LOCAL = False
IS_HEROKU = os.environ.get('DYNO') is not None

WHICH_ENV = 'LOCAL' if str(BASE_DIR).find('/home/nkensa/GDrive-local/Tree/') == 0 else 'LIVE'
if WHICH_ENV == 'LOCAL' :
    DEBUG = True
    IS_LIVE = False
    IS_LOCAL = True



# ALLOWED_HOSTS = ["127.0.0.1", "localhost", "nkensa.pythonanywhere.com"]
# ---------------
ALLOWED_HOSTS = ["*"]

INTERNAL_IPS = [
    "127.0.0.1",
]

# Application definition

INSTALLED_APPS = [
    # core
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # extensions
    'django_unicorn',
    'django_browser_reload',
    'tailwind',
    'theme',
    'fontawesomefree',
    # -----------------
    # @ToDo :: Fix pandas install on pythonanywhere to restore code (see all "Fix pandas" todos)
    # 'pandas',
    'selenium',

    # apps
    'django_app',
    'app',
    'webscraping',
]
if IS_LOCAL:
    INSTALLED_APPS += [
    ]



MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django_browser_reload.middleware.BrowserReloadMiddleware',
]

ROOT_URLCONF = 'django_app.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]


WSGI_APPLICATION = 'django_app.wsgi.application'
if IS_HEROKU:
    WSGI_APPLICATION = 'django_app.wsgi.app'


# Database
# --------
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

# SQLITE
# ------
# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db/db.sqlite3',
#     }
# }
# ------





# POSTGRES
# --------
os.environ.setdefault("PGDATABASE", "webscraper")
os.environ.setdefault("PGUSER", "postgres")
os.environ.setdefault("PGPASSWORD", "LeA45Jf~7ZL][e%k")
os.environ.setdefault("PGHOST", "localhost")
os.environ.setdefault("PGPORT", "5432")


DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.environ.get("PGDATABASE", "webscraper"),
        'USER': os.environ.get("PGUSER", "postgres"),
        'PASSWORD': os.environ.get("PGPASSWORD", ""),
        'HOST': os.environ.get("PGHOST", "localhost"),
        'PORT': os.environ.get("PGPORT", "5432"),
    }
}

if WHICH_ENV != 'LOCAL' or IS_HEROKU:
    import dj_database_url
    DATABASES = {
        'default': dj_database_url.config(conn_max_age=600)  # Optional connection pooling
    }

# ------


# Cache
# -----
# CACHES = {
#     'default': {
#         'BACKEND': 'django.core.cache.backends.redis.RedisCache',
#     }
# }


# CACHES = {
#     'default': {
#         'BACKEND': 'django_redis.cache.RedisCache',
#         'LOCATION': 'redis://127.0.0.1:6379/1',  # Use the appropriate Redis server URL
#         'OPTIONS': {
#             'CLIENT_CLASS': 'django_redis.client.DefaultClient',
#         }
#     }
# }
CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.db.DatabaseCache",
        "LOCATION": "django_cache",
    }
}


# Optional: This is to ensure Django sessions are stored in Redis
SESSION_ENGINE = 'django.contrib.sessions.backends.cache'
SESSION_CACHE_ALIAS = 'default'



# Password validation
# -------------------
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

LOGIN_REDIRECT_URL = "journal"  # Redirect after login
LOGOUT_REDIRECT_URL = "journal"  # Redirect after logout


# Internationalization
# --------------------
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static & Media files (CSS, JavaScript, Images)...
# -------------------------------------------------
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / "staticfiles"

STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")
STATICFILES_DIRS = [os.path.join(BASE_DIR, "static")]

MEDIA_URL = "/media/"
MEDIA_ROOT = BASE_DIR / "media"

STATICFILES_DIRS = [
    BASE_DIR / 'static',
    BASE_DIR / 'media'
]


if IS_HEROKU:
    STATIC_URL = 'https://webscraper-automat-d453797748a5.herokuapp.com/static/'
    MEDIA_URL = 'https://webscraper-automat-d453797748a5.herokuapp.com/media/'



# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# Apps Settings
# -------------

UNICORN = {
    "MORPHER": {
        "NAME": "alpine",
    }
}

TAILWIND_APP_NAME = 'theme'

# ------------------------
# Node, npm
# NPM_BIN_PATH = '/home/nkensa/.config/nvm/versions/node/v20.11.0/bin/npm'
# ------------------------
NPM_BIN_PATH = which("npm")


# ------------------------
# Taggit
# ------------------------

TAGGIT_CASE_INSENSITIVE = True
TAGGIT_STRIP_UNICODE_WHEN_SLUGIFYING = True


# ------------------------
# Mimetypes
# ------------------------
import mimetypes

mimetypes.add_type("application/javascript", ".js", True)
mimetypes.add_type("text/css", ".css", True)


# ------------------------
# Webscraper
#
# Configuration
#    Caching duration: 15 mns
# ------------------------

WEBSCRAPER_SOURCE_PATH = "webscraping/modules/webscraper/"
WEBSCRAPER_HEADLESS = True
WEBSCRAPER_CACHING_DURATION = 3600
WEBSCRAPER_THREADS_MAX = 3
WEBSCRAPER_THREAD_TIMEOUT = timedelta(seconds=10)  # Stop after 10 minutes
WEBSCRAPER_TASK_MAX_ATTEMPTS = 3



# ------------------------
# Logging, Printing
#
# ------------------------

# Create a logger
logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)  # Set the base logger level to DEBUG (captures all levels)

# Create formatters
formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')

# Create handlers for each log level
debug_handler = logging.FileHandler('log/debug.log')
debug_handler.setLevel(logging.DEBUG)
debug_handler.setFormatter(formatter)

info_handler = logging.FileHandler('log/info.log')
info_handler.setLevel(logging.INFO)
info_handler.setFormatter(formatter)

warning_handler = logging.FileHandler('log/warning.log')
warning_handler.setLevel(logging.WARNING)
warning_handler.setFormatter(formatter)

error_handler = logging.FileHandler('log/error.log')
error_handler.setLevel(logging.ERROR)
error_handler.setFormatter(formatter)

critical_handler = logging.FileHandler('log/critical.log')
critical_handler.setLevel(logging.CRITICAL)
critical_handler.setFormatter(formatter)

# Add handlers to the logger
logger.addHandler(debug_handler)
logger.addHandler(info_handler)
logger.addHandler(warning_handler)
logger.addHandler(error_handler)
logger.addHandler(critical_handler)
