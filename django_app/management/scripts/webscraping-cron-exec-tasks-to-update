#!/usr/bin/env bash
# -*- coding: utf8 -*-

# -----------
# With Deepseek / Python - 62610719
# -----------


# Navigate to current, live or local platform's project directory
# ---------------------------------------------------------------
folders=(
    "/root/webscraper"
    "/home/amylovesdaisys/django_app"
    "/home/nkensa/GDrive-local/Tree/Workspaces/dev/frameworks/django/projects/django"
)

for folder in "${folders[@]}"; do
    if [ -d "$folder" ]; then
        echo "cd $folder..."
        cd "$folder"
    fi
done


# Get and set the maximum virtual memory (RAM) limit in KB (e.g., 2GB = 2097152 KB)
# -------------------------------------------------------------------------
MAX_RAM_KB=$(python3 -c "from django_app import settings; print(settings.WEBSCRAPER_THREAD_MAX_RAM_KB)")


# Get and set the maximum check_task time before suppression
# ----------------------------------------------------------
MAX_CHECK_TASK_TIME=$(python3 -c "from django_app import settings; print(settings.WEBSCRAPER_THREADS_MAX_CHECK_TASK_TIME)")

# Count the number of running "marionette" processes
# -----------------------------------------
RUNNING_THREADS=$(ps -eF | grep -i "marionette" | grep -v "grep" | wc -l)

echo "MAX_CHECK_TASK_TIME=$MAX_CHECK_TASK_TIME"
echo "MAX_RAM_KB=$MAX_RAM_KB"
echo "RUNNING_THREADS=$RUNNING_THREADS"
DUM=$(python3 -c "from django_app import settings; settings.logger.info('MAX_CHECK_TASK_TIME=$MAX_CHECK_TASK_TIME, MAX_RAM_KB=$MAX_RAM_KB, RUNNING_THREADS=$RUNNING_THREADS')")

# Check if the number of running threads is below the maximum allowed
# -----------------------------------------
    
# Activate the virtual environment
# ----------------------
source venv/bin/activate

# Run the command with RAM limit
# ----------------------
# @ToDo :: Get and store process id, kill after given time...
if [ "$MAX_RAM_KB" -ne 0 ]; then
    ulimit -v $MAX_RAM_KB
fi
python manage.py check_tasks_to_update &

# Not functional, as process is held...
# -------------------------------
PID=$!  # Store the process ID

# Wait for the process to complete or timeout after 10 minutes
sleep $MAX_CHECK_TASK_TIME
if ps -p $PID > /dev/null; then
    kill $PID  # Kill the process if it's still running
    echo "Process $PID killed after timeout."
fi
    
# Notify the user
# ----------------------
notify-send "Webscraping" "Check tasks to end done..."

exit